# This is a basic workflow to help you get started with Actions

name: Excersize 4 blue green

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths: 
    - 4. Simple blue green/**
    - .github/workflows/4_blue_green.yaml

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# Env to set reusable variables
env:
  ACRNAME: nfacr
  
jobs:
  CI:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Git checkout
        uses: actions/checkout@v2

      - name: az CLI login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: ACR login
        run: az acr login -n $ACRNAME
        
      
      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          context: "./4. Simple blue green"
          push: true
          tags: ${{ env.ACRNAME }}.azurecr.io/microhack/website:${{ github.run_number }}
          
  CD:
    runs-on: ubuntu-latest
    needs: CI
    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      - name: Azure Kubernetes set context
        uses: Azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: rg-handsonaks
          cluster-name: handsonaks

      - name: Check if chart is installed
        continue-on-error: true
        run: |
          if helm status bg-pipeline ; then
            echo "STATUS=update" >> $GITHUB_ENV
          else
            echo "STATUS=install" >> $GITHUB_ENV
          fi

      - name: Install if status is not set.
        if: ${{ env.STATUS == 'install' }}
        run: |
          helm install bg-pipeline "4. Simple blue green/website" \
          --set blue.repository=$ACRNAME.azurecr.io/microhack/website \
          --set blue.tag=${{ github.run_number }} \
          --set green.repository=$ACRNAME.azurecr.io/microhack/website \
          --set green.tag=${{ github.run_number }}         \
          --set production=blue       

      - name: Upgrade if status is not set
        if: ${{ env.STATUS == 'update' }}
        run: |
          COLOR=`kubectl get svc bg-pipeline-website -o yaml | grep " color" | awk -F ' ' '{print $2}'`
          echo "Current prod is $COLOR"
          if [ "$COLOR" = "blue" ]
          then
            echo "UPDATE=green" >> $GITHUB_ENV
            UPDATE=green
          else
            echo "UPDATE=blue" >> $GITHUB_ENV
            UPDATE=blue
          fi
          helm upgrade bg-pipeline "4. Simple blue green/website" --reuse-values \
              --set $UPDATE.repository=$ACRNAME.azurecr.io/microhack/website \
              --set $UPDATE.tag=${{ github.run_number }} 
          kubectl rollout status deployment bg-pipeline-website-$UPDATE

  Flip:
    runs-on: ubuntu-latest
    needs: CD
    env: CD
    steps:
      - name: Git checkout
        uses: actions/checkout@v2 
      - name: Check which flip is needed
        continue-on-error: true
        run: |
          COLOR=`kubectl get svc bg-pipeline-website -o yaml | grep " color" | awk -F ' ' '{print $2}'`
          echo "Current prod is $COLOR"
          if [ "$COLOR" = "blue" ]
          then
            echo "UPDATE=green" >> $GITHUB_ENV
          else
            echo "UPDATE=blue" >> $GITHUB_ENV
          fi  
      - name: Flip production service
        run: |
          echo "Flipping service to $UPDATE"
          helm upgrade bg-pipeline "4. Simple blue green/website" --reuse-values \
              --set production=$UPDATE

